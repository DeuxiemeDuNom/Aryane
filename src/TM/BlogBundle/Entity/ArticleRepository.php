<?php

namespace TM\BlogBundle\Entity;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
	public function filter($cat)
	{
	  	$qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->leftJoin('s.category', 'c')
             ->addSelect('c')
             ->where('c.name = :name')
             ->setParameter('name', $cat);

  		return $qb  ->getQuery()
                    ->getResult();
	}

	public function detail($subcat)
	{
	  	$qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->where('s.name = :name')
             ->setParameter('name', $subcat);

  		return $qb  ->getQuery()
                    ->getResult();
	}

    public function also($subcat)
    {
        $qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->where('s.name = :name')
             ->setParameter('name', $subcat)
             ->setMaxResults(4);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function formFilter($id)
    {
        $qb = $this->createQueryBuilder('a')
             ->where('a.id = :id')
             ->setParameter('id', (int) $id);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function last($limit)
    {
        $qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->leftJoin('s.category', 'c')
             ->addSelect('c')
             ->orderBy("a.date", 'DESC')
             ->setMaxResults($limit);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function sell($limit = null)
    {
        $qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->leftJoin('s.category', 'c')
             ->addSelect('c')
             ->orderBy("a.name", 'DESC')
             ->setMaxResults($limit);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function recent($limit = null)
    {
        $qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->leftJoin('s.category', 'c')
             ->addSelect('c')
             ->orderBy("a.price", 'DESC')
             ->setMaxResults($limit);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function newz($limit = null)
    {
        $qb = $this->createQueryBuilder('a')
             ->leftJoin('a.subcategory', 's')
             ->addSelect('s')
             ->leftJoin('s.category', 'c')
             ->addSelect('c')
             ->orderBy("a.id", 'DESC')
             ->setMaxResults($limit);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function panier($id_list)
    {
        $qb = $this->createQueryBuilder('a')
             ->where('a.id = :id')
             ->setParameter('id', $id_list);

        return $qb  ->getQuery()
                    ->getResult();
    }

    public function compte()
    {
        $qb = $this->createQueryBuilder('a')
          ->select('COUNT(a)');

        return $qb  ->getQuery()
                    ->getSingleScalarResult();
    }
}
